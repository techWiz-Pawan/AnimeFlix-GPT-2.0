{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\E A S Y\\\\Documents\\\\UP_Skilling\\\\DVOC\\\\projects\\\\Term_3_project\\\\AnimeFlix-GPT\\\\frontend\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [isSignInForm, setIsSignInForm] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const email = useRef(null);\n  const password = useRef(null);\n  const handleButtonClick = () => {\n    // let first validate the data\n    const message = checkValidData(email.current.value, password.current.value);\n    setErrorMessage(message);\n\n    // after validation checking is done then i can proceed with signIn/signUp\n  };\n  const toggleSignInForm = () => {\n    setIsSignInForm(!isSignInForm);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"WbBZ25kHjvZvzd89dYw37d06vu8=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Login","_s","isSignInForm","setIsSignInForm","errorMessage","setErrorMessage","email","useRef","password","handleButtonClick","message","checkValidData","current","value","toggleSignInForm","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/E A S Y/Documents/UP_Skilling/DVOC/projects/Term_3_project/AnimeFlix-GPT/frontend/src/components/Login.js"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst Login = () => {\r\n  \r\n  const [isSignInForm, setIsSignInForm] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const email = useRef(null);\r\n  const password = useRef(null);\r\n\r\n  const handleButtonClick = () => {\r\n    // let first validate the data\r\n    const message = checkValidData(email.current.value, password.current.value);\r\n    setErrorMessage(message);\r\n\r\n    // after validation checking is done then i can proceed with signIn/signUp\r\n    \r\n\r\n  }\r\n\r\n  const toggleSignInForm = () => {\r\n    setIsSignInForm(!isSignInForm);\r\n  };\r\n    return (\r\n    <div>Login</div>\r\n  )\r\n}\r\n\r\nexport default Login"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMS,KAAK,GAAGC,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMC,QAAQ,GAAGD,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAMC,OAAO,GAAGC,cAAc,CAACL,KAAK,CAACM,OAAO,CAACC,KAAK,EAAEL,QAAQ,CAACI,OAAO,CAACC,KAAK,CAAC;IAC3ER,eAAe,CAACK,OAAO,CAAC;;IAExB;EAGF,CAAC;EAED,MAAMI,gBAAgB,GAAGA,CAAA,KAAM;IAC7BX,eAAe,CAAC,CAACD,YAAY,CAAC;EAChC,CAAC;EACC,oBACAH,OAAA;IAAAgB,QAAA,EAAK;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEpB,CAAC;AAAAlB,EAAA,CAxBKD,KAAK;AAAAoB,EAAA,GAALpB,KAAK;AA0BX,eAAeA,KAAK;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}